"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Account = function () {
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Account options.
   */
  function Account(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Account);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);
  }

  /**
   * TODO: document
   */


  _createClass(Account, [{
    key: "checkBalance",
    value: function checkBalance(callback) {
      return this.options.rest.get("/account/get-balance", callback);
    }
  }, {
    key: "updatePassword",
    value: function updatePassword(newSecret, callback) {
      return this.options.rest.postUseQueryString("/account/settings", { newSecret: newSecret }, callback);
    }
  }, {
    key: "updateSMSCallback",
    value: function updateSMSCallback(moCallBackUrl, callback) {
      return this.options.rest.postUseQueryString("/account/settings", { moCallBackUrl: moCallBackUrl }, callback);
    }
  }, {
    key: "updateDeliveryReceiptCallback",
    value: function updateDeliveryReceiptCallback(drCallBackUrl, callback) {
      return this.options.rest.postUseQueryString("/account/settings", { drCallBackUrl: drCallBackUrl }, callback);
    }
  }, {
    key: "topUp",
    value: function topUp(trx, callback) {
      return this.options.rest.postUseQueryString("/account/top-up", { trx: trx }, callback);
    }
  }, {
    key: "listSecrets",
    value: function listSecrets(apiKey, callback) {
      return this.options.api.get("/accounts/" + apiKey + "/secrets", {}, callback, false, true);
    }
  }, {
    key: "getSecret",
    value: function getSecret(apiKey, id, callback) {
      return this.options.api.get("/accounts/" + apiKey + "/secrets/" + id, {}, callback, false, true);
    }
  }, {
    key: "createSecret",
    value: function createSecret(apiKey, secret, callback) {
      return this.options.api.postJson("/accounts/" + apiKey + "/secrets/", { secret: secret }, callback, false, true);
    }
  }, {
    key: "deleteSecret",
    value: function deleteSecret(apiKey, id, callback) {
      return this.options.api.delete("/accounts/" + apiKey + "/secrets/" + id, callback, false, true);
    }
  }]);

  return Account;
}();

exports.default = Account;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BY2NvdW50LmpzIl0sIm5hbWVzIjpbIkFjY291bnQiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJjcmVkcyIsIl9uZXhtbyIsIm5leG1vT3ZlcnJpZGUiLCJuZXhtbyIsImluaXRpYWxpemUiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJjYWxsYmFjayIsInJlc3QiLCJnZXQiLCJuZXdTZWNyZXQiLCJwb3N0VXNlUXVlcnlTdHJpbmciLCJtb0NhbGxCYWNrVXJsIiwiZHJDYWxsQmFja1VybCIsInRyeCIsImFwaSIsImlkIiwic2VjcmV0IiwicG9zdEpzb24iLCJkZWxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7Ozs7OztJQUVNQSxPO0FBQ0o7Ozs7OztBQU1BLG1CQUFZQyxXQUFaLEVBQXVDO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUNyQyxTQUFLQyxLQUFMLEdBQWFGLFdBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7O0FBRUE7QUFDQSxTQUFLRSxNQUFMLEdBQWMsS0FBS0YsT0FBTCxDQUFhRyxhQUFiLElBQThCQyxlQUE1Qzs7QUFFQSxTQUFLRixNQUFMLENBQVlHLFVBQVosQ0FDRSxLQUFLSixLQUFMLENBQVdLLE1BRGIsRUFFRSxLQUFLTCxLQUFMLENBQVdNLFNBRmIsRUFHRSxLQUFLUCxPQUhQO0FBS0Q7O0FBRUQ7Ozs7Ozs7aUNBR2FRLFEsRUFBVTtBQUNyQixhQUFPLEtBQUtSLE9BQUwsQ0FBYVMsSUFBYixDQUFrQkMsR0FBbEIsQ0FBc0Isc0JBQXRCLEVBQThDRixRQUE5QyxDQUFQO0FBQ0Q7OzttQ0FFY0csUyxFQUFXSCxRLEVBQVU7QUFDbEMsYUFBTyxLQUFLUixPQUFMLENBQWFTLElBQWIsQ0FBa0JHLGtCQUFsQixDQUNMLG1CQURLLEVBRUwsRUFBRUQsb0JBQUYsRUFGSyxFQUdMSCxRQUhLLENBQVA7QUFLRDs7O3NDQUVpQkssYSxFQUFlTCxRLEVBQVU7QUFDekMsYUFBTyxLQUFLUixPQUFMLENBQWFTLElBQWIsQ0FBa0JHLGtCQUFsQixDQUNMLG1CQURLLEVBRUwsRUFBRUMsNEJBQUYsRUFGSyxFQUdMTCxRQUhLLENBQVA7QUFLRDs7O2tEQUU2Qk0sYSxFQUFlTixRLEVBQVU7QUFDckQsYUFBTyxLQUFLUixPQUFMLENBQWFTLElBQWIsQ0FBa0JHLGtCQUFsQixDQUNMLG1CQURLLEVBRUwsRUFBRUUsNEJBQUYsRUFGSyxFQUdMTixRQUhLLENBQVA7QUFLRDs7OzBCQUVLTyxHLEVBQUtQLFEsRUFBVTtBQUNuQixhQUFPLEtBQUtSLE9BQUwsQ0FBYVMsSUFBYixDQUFrQkcsa0JBQWxCLENBQ0wsaUJBREssRUFFTCxFQUFFRyxRQUFGLEVBRkssRUFHTFAsUUFISyxDQUFQO0FBS0Q7OztnQ0FFV0YsTSxFQUFRRSxRLEVBQVU7QUFDNUIsYUFBTyxLQUFLUixPQUFMLENBQWFnQixHQUFiLENBQWlCTixHQUFqQixDQUNMLGVBQWVKLE1BQWYsR0FBd0IsVUFEbkIsRUFFTCxFQUZLLEVBR0xFLFFBSEssRUFJTCxLQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7Ozs4QkFFU0YsTSxFQUFRVyxFLEVBQUlULFEsRUFBVTtBQUM5QixhQUFPLEtBQUtSLE9BQUwsQ0FBYWdCLEdBQWIsQ0FBaUJOLEdBQWpCLENBQ0wsZUFBZUosTUFBZixHQUF3QixXQUF4QixHQUFzQ1csRUFEakMsRUFFTCxFQUZLLEVBR0xULFFBSEssRUFJTCxLQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7OztpQ0FFWUYsTSxFQUFRWSxNLEVBQVFWLFEsRUFBVTtBQUNyQyxhQUFPLEtBQUtSLE9BQUwsQ0FBYWdCLEdBQWIsQ0FBaUJHLFFBQWpCLENBQ0wsZUFBZWIsTUFBZixHQUF3QixXQURuQixFQUVMLEVBQUVZLFFBQVFBLE1BQVYsRUFGSyxFQUdMVixRQUhLLEVBSUwsS0FKSyxFQUtMLElBTEssQ0FBUDtBQU9EOzs7aUNBRVlGLE0sRUFBUVcsRSxFQUFJVCxRLEVBQVU7QUFDakMsYUFBTyxLQUFLUixPQUFMLENBQWFnQixHQUFiLENBQWlCSSxNQUFqQixDQUNMLGVBQWVkLE1BQWYsR0FBd0IsV0FBeEIsR0FBc0NXLEVBRGpDLEVBRUxULFFBRkssRUFHTCxLQUhLLEVBSUwsSUFKSyxDQUFQO0FBTUQ7Ozs7OztrQkFHWVYsTyIsImZpbGUiOiJBY2NvdW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBuZXhtbyBmcm9tIFwiLi9pbmRleFwiO1xuXG5jbGFzcyBBY2NvdW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzXG4gICAqICAgIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgIEFkZGl0aW9uIEFjY291bnQgb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZGVudGlhbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIFVzZWQgdG8gZmFjaWxpdGF0ZSB0ZXN0aW5nIG9mIHRoZSBjYWxsIHRvIHRoZSB1bmRlcmx5aW5nIG9iamVjdFxuICAgIHRoaXMuX25leG1vID0gdGhpcy5vcHRpb25zLm5leG1vT3ZlcnJpZGUgfHwgbmV4bW87XG5cbiAgICB0aGlzLl9uZXhtby5pbml0aWFsaXplKFxuICAgICAgdGhpcy5jcmVkcy5hcGlLZXksXG4gICAgICB0aGlzLmNyZWRzLmFwaVNlY3JldCxcbiAgICAgIHRoaXMub3B0aW9uc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVE9ETzogZG9jdW1lbnRcbiAgICovXG4gIGNoZWNrQmFsYW5jZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5nZXQoXCIvYWNjb3VudC9nZXQtYmFsYW5jZVwiLCBjYWxsYmFjayk7XG4gIH1cblxuICB1cGRhdGVQYXNzd29yZChuZXdTZWNyZXQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvc2V0dGluZ3NcIixcbiAgICAgIHsgbmV3U2VjcmV0IH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICB1cGRhdGVTTVNDYWxsYmFjayhtb0NhbGxCYWNrVXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3NldHRpbmdzXCIsXG4gICAgICB7IG1vQ2FsbEJhY2tVcmwgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZURlbGl2ZXJ5UmVjZWlwdENhbGxiYWNrKGRyQ2FsbEJhY2tVcmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvc2V0dGluZ3NcIixcbiAgICAgIHsgZHJDYWxsQmFja1VybCB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdG9wVXAodHJ4LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3RvcC11cFwiLFxuICAgICAgeyB0cnggfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGxpc3RTZWNyZXRzKGFwaUtleSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5nZXQoXG4gICAgICBcIi9hY2NvdW50cy9cIiArIGFwaUtleSArIFwiL3NlY3JldHNcIixcbiAgICAgIHt9LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgZ2V0U2VjcmV0KGFwaUtleSwgaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkuZ2V0KFxuICAgICAgXCIvYWNjb3VudHMvXCIgKyBhcGlLZXkgKyBcIi9zZWNyZXRzL1wiICsgaWQsXG4gICAgICB7fSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVNlY3JldChhcGlLZXksIHNlY3JldCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5wb3N0SnNvbihcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0cy9cIixcbiAgICAgIHsgc2VjcmV0OiBzZWNyZXQgfSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZVNlY3JldChhcGlLZXksIGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLmRlbGV0ZShcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0cy9cIiArIGlkLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjY291bnQ7XG4iXX0=