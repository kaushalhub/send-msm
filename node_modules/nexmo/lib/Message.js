"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Message = function () {
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition SMS options.
   */
  function Message(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Message);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);
  }

  /**
   * TODO: document
   */


  _createClass(Message, [{
    key: "sendSms",
    value: function sendSms() {
      this._nexmo.sendTextMessage.apply(this._nexmo, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendBinaryMessage",
    value: function sendBinaryMessage() {
      this._nexmo.sendBinaryMessage.apply(this._nexmo, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "sendWapPushMessage",
    value: function sendWapPushMessage() {
      this._nexmo.sendWapPushMessage.apply(this._nexmo, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "shortcodeAlert",
    value: function shortcodeAlert() {
      this._nexmo.shortcodeAlert.apply(this._nexmo, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "shortcode2FA",
    value: function shortcode2FA() {
      this._nexmo.shortcode2FA.apply(this._nexmo, arguments);
    }

    /**
     * TODO: document
     */

  }, {
    key: "shortcodeMarketing",
    value: function shortcodeMarketing() {
      this._nexmo.shortcodeMarketing.apply(this._nexmo, arguments);
    }
  }, {
    key: "search",
    value: function search(id, callback) {
      if (typeof id == "string") {
        return this.options.rest.get("/search/message", { id: id }, callback);
      }

      // Otherwise we expect an array
      return this.options.rest.get("/search/messages", { ids: id }, callback);
    }
  }, {
    key: "searchRejections",
    value: function searchRejections(to, date, callback) {
      return this.options.rest.get("/search/rejections", { to: to, date: date }, callback);
    }
  }]);

  return Message;
}();

exports.default = Message;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NZXNzYWdlLmpzIl0sIm5hbWVzIjpbIk1lc3NhZ2UiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJjcmVkcyIsIl9uZXhtbyIsIm5leG1vT3ZlcnJpZGUiLCJuZXhtbyIsImluaXRpYWxpemUiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJzZW5kVGV4dE1lc3NhZ2UiLCJhcHBseSIsImFyZ3VtZW50cyIsInNlbmRCaW5hcnlNZXNzYWdlIiwic2VuZFdhcFB1c2hNZXNzYWdlIiwic2hvcnRjb2RlQWxlcnQiLCJzaG9ydGNvZGUyRkEiLCJzaG9ydGNvZGVNYXJrZXRpbmciLCJpZCIsImNhbGxiYWNrIiwicmVzdCIsImdldCIsImlkcyIsInRvIiwiZGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUE7Ozs7Ozs7O0lBRU1BLE87QUFDSjs7Ozs7O0FBTUEsbUJBQVlDLFdBQVosRUFBdUM7QUFBQSxRQUFkQyxPQUFjLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ3JDLFNBQUtDLEtBQUwsR0FBYUYsV0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFFQTtBQUNBLFNBQUtFLE1BQUwsR0FBYyxLQUFLRixPQUFMLENBQWFHLGFBQWIsSUFBOEJDLGVBQTVDOztBQUVBLFNBQUtGLE1BQUwsQ0FBWUcsVUFBWixDQUNFLEtBQUtKLEtBQUwsQ0FBV0ssTUFEYixFQUVFLEtBQUtMLEtBQUwsQ0FBV00sU0FGYixFQUdFLEtBQUtQLE9BSFA7QUFLRDs7QUFFRDs7Ozs7Ozs4QkFHVTtBQUNSLFdBQUtFLE1BQUwsQ0FBWU0sZUFBWixDQUE0QkMsS0FBNUIsQ0FBa0MsS0FBS1AsTUFBdkMsRUFBK0NRLFNBQS9DO0FBQ0Q7O0FBRUQ7Ozs7Ozt3Q0FHb0I7QUFDbEIsV0FBS1IsTUFBTCxDQUFZUyxpQkFBWixDQUE4QkYsS0FBOUIsQ0FBb0MsS0FBS1AsTUFBekMsRUFBaURRLFNBQWpEO0FBQ0Q7O0FBRUQ7Ozs7Ozt5Q0FHcUI7QUFDbkIsV0FBS1IsTUFBTCxDQUFZVSxrQkFBWixDQUErQkgsS0FBL0IsQ0FBcUMsS0FBS1AsTUFBMUMsRUFBa0RRLFNBQWxEO0FBQ0Q7O0FBRUQ7Ozs7OztxQ0FHaUI7QUFDZixXQUFLUixNQUFMLENBQVlXLGNBQVosQ0FBMkJKLEtBQTNCLENBQWlDLEtBQUtQLE1BQXRDLEVBQThDUSxTQUE5QztBQUNEOztBQUVEOzs7Ozs7bUNBR2U7QUFDYixXQUFLUixNQUFMLENBQVlZLFlBQVosQ0FBeUJMLEtBQXpCLENBQStCLEtBQUtQLE1BQXBDLEVBQTRDUSxTQUE1QztBQUNEOztBQUVEOzs7Ozs7eUNBR3FCO0FBQ25CLFdBQUtSLE1BQUwsQ0FBWWEsa0JBQVosQ0FBK0JOLEtBQS9CLENBQXFDLEtBQUtQLE1BQTFDLEVBQWtEUSxTQUFsRDtBQUNEOzs7MkJBRU1NLEUsRUFBSUMsUSxFQUFVO0FBQ25CLFVBQUksT0FBT0QsRUFBUCxJQUFhLFFBQWpCLEVBQTJCO0FBQ3pCLGVBQU8sS0FBS2hCLE9BQUwsQ0FBYWtCLElBQWIsQ0FBa0JDLEdBQWxCLENBQXNCLGlCQUF0QixFQUF5QyxFQUFFSCxJQUFJQSxFQUFOLEVBQXpDLEVBQXFEQyxRQUFyRCxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxhQUFPLEtBQUtqQixPQUFMLENBQWFrQixJQUFiLENBQWtCQyxHQUFsQixDQUFzQixrQkFBdEIsRUFBMEMsRUFBRUMsS0FBS0osRUFBUCxFQUExQyxFQUF1REMsUUFBdkQsQ0FBUDtBQUNEOzs7cUNBRWdCSSxFLEVBQUlDLEksRUFBTUwsUSxFQUFVO0FBQ25DLGFBQU8sS0FBS2pCLE9BQUwsQ0FBYWtCLElBQWIsQ0FBa0JDLEdBQWxCLENBQXNCLG9CQUF0QixFQUE0QyxFQUFFRSxNQUFGLEVBQU1DLFVBQU4sRUFBNUMsRUFBMERMLFFBQTFELENBQVA7QUFDRDs7Ozs7O2tCQUdZbkIsTyIsImZpbGUiOiJNZXNzYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBuZXhtbyBmcm9tIFwiLi9pbmRleFwiO1xuXG5jbGFzcyBNZXNzYWdlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzXG4gICAqICAgIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgIEFkZGl0aW9uIFNNUyBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgLy8gVXNlZCB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2YgdGhlIGNhbGwgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0XG4gICAgdGhpcy5fbmV4bW8gPSB0aGlzLm9wdGlvbnMubmV4bW9PdmVycmlkZSB8fCBuZXhtbztcblxuICAgIHRoaXMuX25leG1vLmluaXRpYWxpemUoXG4gICAgICB0aGlzLmNyZWRzLmFwaUtleSxcbiAgICAgIHRoaXMuY3JlZHMuYXBpU2VjcmV0LFxuICAgICAgdGhpcy5vcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgc2VuZFNtcygpIHtcbiAgICB0aGlzLl9uZXhtby5zZW5kVGV4dE1lc3NhZ2UuYXBwbHkodGhpcy5fbmV4bW8sIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogVE9ETzogZG9jdW1lbnRcbiAgICovXG4gIHNlbmRCaW5hcnlNZXNzYWdlKCkge1xuICAgIHRoaXMuX25leG1vLnNlbmRCaW5hcnlNZXNzYWdlLmFwcGx5KHRoaXMuX25leG1vLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBzZW5kV2FwUHVzaE1lc3NhZ2UoKSB7XG4gICAgdGhpcy5fbmV4bW8uc2VuZFdhcFB1c2hNZXNzYWdlLmFwcGx5KHRoaXMuX25leG1vLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBzaG9ydGNvZGVBbGVydCgpIHtcbiAgICB0aGlzLl9uZXhtby5zaG9ydGNvZGVBbGVydC5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgc2hvcnRjb2RlMkZBKCkge1xuICAgIHRoaXMuX25leG1vLnNob3J0Y29kZTJGQS5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgc2hvcnRjb2RlTWFya2V0aW5nKCkge1xuICAgIHRoaXMuX25leG1vLnNob3J0Y29kZU1hcmtldGluZy5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHNlYXJjaChpZCwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGlkID09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5nZXQoXCIvc2VhcmNoL21lc3NhZ2VcIiwgeyBpZDogaWQgfSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSB3ZSBleHBlY3QgYW4gYXJyYXlcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QuZ2V0KFwiL3NlYXJjaC9tZXNzYWdlc1wiLCB7IGlkczogaWQgfSwgY2FsbGJhY2spO1xuICB9XG5cbiAgc2VhcmNoUmVqZWN0aW9ucyh0bywgZGF0ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QuZ2V0KFwiL3NlYXJjaC9yZWplY3Rpb25zXCIsIHsgdG8sIGRhdGUgfSwgY2FsbGJhY2spO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2U7XG4iXX0=