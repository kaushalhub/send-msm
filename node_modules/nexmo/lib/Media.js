"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Media = function () {
  _createClass(Media, null, [{
    key: "PATH",
    get: function get() {
      return "/v3/media";
    }
  }]);

  function Media(credentials, options) {
    _classCallCheck(this, Media);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);
  }

  _createClass(Media, [{
    key: "upload",
    value: function upload(opts, callback) {
      opts = opts || {};
      if (!opts.file && !opts.url) {
        throw new Error("You must provide either 'file' or 'url' to upload a file");
      }

      if (opts.file) {
        opts.file = _fs2.default.createReadStream(opts.file);
      }
      return this.options.api.postFile(Media.PATH, opts, function (err, response, body) {
        if (err) {
          return callback(err);
        }

        var location = "";
        if (response && response.headers) {
          location = response.headers.location;
        }

        return callback(null, location);
      }, true);
    }
  }, {
    key: "search",
    value: function search(options, callback) {
      if (typeof options == "function" && !callback) {
        callback = options;
        options = {};
      }

      options = options || {};

      return this._makeRequest("GET", Media.PATH, options, {}, callback);
    }

    // If If-Modified-Since header is provided and the data hasn't changed, the
    // user will receive an empty body in the callback, NOT an error

  }, {
    key: "download",
    value: function download(id, headers, callback) {
      if (!callback && typeof headers == "function") {
        callback = headers;
        headers = {};
      }

      return this._makeRequest("GET", Media.PATH + "/" + id, {}, headers, callback, true);
    }
  }, {
    key: "delete",
    value: function _delete(id, callback) {
      return this._makeRequest("DELETE", Media.PATH + "/" + id, {}, {}, callback);
    }
  }, {
    key: "get",
    value: function get(id, callback) {
      return this._makeRequest("GET", Media.PATH + "/" + id + "/info", {}, {}, callback);
    }
  }, {
    key: "update",
    value: function update(id, opts, callback) {
      return this._makeRequest("PUT", Media.PATH + "/" + id + "/info", opts, {}, callback);
    }
  }, {
    key: "_makeRequest",
    value: function _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {
      headers = Object.assign({
        "Content-Type": "application/json",
        Authorization: "Bearer " + this.creds.generateJwt()
      }, headers);

      var req = {};
      if (verb.toUpperCase() === "GET") {
        if (Object.keys(options).length) {
          path = path + "?" + _querystring2.default.stringify(options);
        }
      } else {
        req["body"] = JSON.stringify(options);
      }

      req["path"] = path;
      req["headers"] = headers;

      return this.options.api.request(req, verb, callback, skipJsonParsing);
    }
  }]);

  return Media;
}();

exports.default = Media;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,